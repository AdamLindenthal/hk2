
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.


    ------
    Introduction to Class-Model
    ------
    Jerome Dochez
    ------
    ------


	A lot of managed environment need extensive meta-data about the application/components it's managing. Such
information can range from looking for annotations usages or class hierarchies. Although it is possible to use
Java SE reflection APIs, such technique relies on classes being loaded by a class loader. Such assumption is both
performance penalizing but also represents challenges as most of these managed environment perform code weaving
that forces a reload using a different classloader adding to the performances issues.

    Class Model is a set of reflection APIs on Java classes that is aimed to provide this reflective meta-data
without requiring the presence of a classloader, it operates at the archive or directory level, loading .class
files and processing them with the ASM library (http://asm.ow2.org/).

Scanning Process

    In order to obtain the class-model reflection for a particular set of classes, it is necessary to parse such
classes. Parsing will build an in memory model (level of details of such model can be adapted to needs) while
parsing the input classes.

* Example of parsing.

    The simplest way to use this library is

+-------------------------------+
ParsingContext pc = (new ParsingContext.Builder()).build();
Parser parser = new Parser(pc);
parser.parse(new File("/path/to/a/jar/file"));
parser.awaitTermination(100, TimeUnit.SECONDS);
+-------------------------------+

    and extract the resulting visited types from the {{{.\/apidocs\/org\/glassfish\/hk2\/classmodel\/reflect\/ParsingContext.html#getTypes()}getTypes}} method

* Parsing Context

    The entry point to the parsing is the {{{.\/apidocs\/org\/glassfish\/hk2\/classmodel\/reflect\/ParsingContext.Builder.html}ParsingContext.Builder}}
which can be used to provided environmental settings like the logger, or the executor service instance to run the
parsing activity.

** Parsing Config

    A notable setting of the Parsing Context is the {{{.\/apidocs\/org\/glassfish\/hk2\/classmodel\/reflect\/util\/ParsingConfig.html}ParsingConfig}}
which is used to filter the classes that should be exhaustively parsed. All classes provided in input will be parsed
independently of the ParsingConfig settings, however classes that are either annotated with certain annotations or
a subtype of certain types will be exhaustively parsed. See the table below for the difference between the 2 parsing activities.


*----------*--------------*----------------*
| Parsing  | Non Exhaustive | Exhaustive   |
| type     |                |              |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/ExtensibleType.html#getParent()}getParent}}   | y              |  y           |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/ExtensibleType.html#subTypes()}subTypes}}   | y              |  y           |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/ExtensibleType.html#allSubTypes()}allInterfaces}}   | y              |  y           |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/ExtensibleType.html#getInterfaces()}getInterfaces}}   | y              |  y           |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/impl/AnnotationTypeImpl.html#allAnnotatedTypes()}allAnnotatedTypes()}} | y | y |
*----------*----------------*--------------*
| {{{./apidocs/org/glassfish/hk2/classmodel/reflect/ClassModel.html#getFields()}getFields()}} | n | y |
*----------*--------------*----------------*

** Resource Locator

    Another important settings of the parsing context is the resource locator instance.
It is sometimes important to selectively parser files based that are not part of the parsing imput
files but can be referenced by one of those input files. Such reference should most of the time
trigger a parsing of the referenced type as it may contains metadata of importance like an interface
implementation or an annotation. At the end of the parsing activity on the source files, the parser
will look at all the referenced types that were not visited (since not provided as an imput file)
and will call the optionally provided {{{.\/apidocs\/org\/glassfish\/hk2\/classmodel\/reflect\/ResourceLocator.html}ResourceLocator}}
instance to get access to the requested type .class file.


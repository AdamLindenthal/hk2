
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.


														------
														Introduction to Configuration
														------
														Jerome Dochez
														------
														---

	Most server side software store configuration in xml file, and naturally HK2 offers 
such support out of the box. However, extensions hooks are provided to save configuration 
to other means that an xml file as the configuration structure definition is agnostic of
the underlying persistence model. For that particular reasons, it was not practical to 
define our configuration mappings using a technology like JAXB due to its attachement
to the xml format. 

	However, the description of such mappings ressembles the JAXB interfaces definition.

Mapping

	The mapping from Java to a persisted configuration is using a tree of plain old Java
interfaces definitions that reprensent the document structure. Each tree node can have
attributes which can only be a String or a type that maps directly to a String 
(with a toString() method and a String parameter based constructor), and can have sub-elements
which are tree nodes themselves. Such elements can have various cardinality, 
like 0|1, 1, 1..n, 0..n. 

* @Configured

	Any interface defining a configuration mapping must be annotated with 
{{{./apidocs/org/jvnet/hk2/config/Configured.html}Configured}} so the necessary
metadata be generated by the HK2 APT plugin. 

+-------------------------------+
@Configured
public interface HttpServer extends ConfigBeanProxy {
	// mappings for the http-server element defined here
}
+-------------------------------+

	will result in the following xml snippet :

+-------------------------------+
<....>
	<http-server ... />
</...>
+-------------------------------+

** Attributes
	
	Attributes are represented in the configuration definition with the 
{{{./apidocs/org/jvnet/hk2/config/Attribute.html}Attribute}} annotation.  

+-------------------------------+
@Configured
public interface HttpServer extends ConfigBeanProxy {

	@Attribute
	String getName();
	void setName(String name);

}
+-------------------------------+
	
	will result in the following xml snippet :
+-------------------------------+
<....>
	<http-server name="..." ... />
</...>
+-------------------------------+

** Elements

	Sub elements of a configuration node are represented in the configuration 
definition with  {{{./apidocs/org/jvnet/hk2/config/Element.html}Element}} annotation.

	Let's imagine another configuration mapping : 

+-------------------------------+
@Configured 
public interface HttpListener extends ConfigBeanProxy {
	@Attribute
	String getName();
}
+-------------------------------+

	now our example can be enhanced with : 
	
+-------------------------------+
@Configured
public interface HttpServer extends ConfigBeanProxy {

	@Attribute
	String getName();
	void setName(String name);
	
	@Attribute 
	String getPort();
	void setPort(String port);

	@Element
	HttpListener getHttpListener();
	void setHttpListener(HttpListener listener);
}
+-------------------------------+

	will result in the following xml snippet :
	
+-------------------------------+
<....>
	<http-server name="..." ... >
		<http-listener name="..." port="8090" .../>
	</http-server-name>
</...>	
+-------------------------------+

* Transaction

	In order to change any configuration elements, one must start a configuration transaction that
ensures restricted access to the configuration. The configuration uses a view mechanism to give access
to the underlying configuration bean. By default, injected code gets a readable view while code 
using a transaction to mutate configuration will obtain a writeable view automatically. While a transaction
is in effect, other threads will continue seeing the un-modified values through their redable views 
while threads having access to the writeable view will be able to change the configuration and see
 the mutated values. As soon as the transaction is successfully commited, the readable views will
 give access to the changed configuration. 
 
** Single configuration object mutation
 
 	In the simple case, code needs to mutate one configuration object during a transaction. The 
simple ConfigSupport.apply method should be used :

+-------------------------------+

    /**
     * Execute some logic on one config bean of type T protected by a transaction
     *
     * @param code code to execute
     * @param param config object participating in the transaction
     * @return list of events that represents the modified config elements.
     * @throws TransactionFailure when code did not run successfully
     */
 public static <T extends ConfigBeanProxy> Object apply(final SingleConfigCode<T> code, T param)
        throws TransactionFailure 
+-------------------------------+

*** Example 

	In the example below, let's change our HttpListener port value :

	before the transaction is started, the xml looks like : 

+-------------------------------+
<....>
	<http-server name="..." ... >
		<http-listener name="..." port="8090".../>
	</http-server-name>
</...>	
+-------------------------------+

	the following code is the actually transaction invocation :

+-------------------------------+
@Inject
HttpListener httpListener;

ConfigSupport.apply(new SingleCodeCode<HttpListener>() {
	public Object run(HttpListener wListener) {
		wListener.setPort("8080");
	}, httpListener);	
+-------------------------------+

	will have the resulting effect on the xml 

+-------------------------------+
<....>
	<http-server name="..." ... >
		<http-listener name="..." port="8080".../>
	</http-server-name>
</...>	
+-------------------------------+

** Vetoing changes

	Any code can register itself to listen to changes as they happen within a transaction. Such
listeners have the ability to raise a PropertyVetoException that will force the pending transaction to
be rolled back (all changes to all beans will then be discarded).

	Note the code below will be simplified soon : 

+-------------------------------+
        ((ConfigBean) ConfigSupport.getImpl(target)).getOptionalFeature(ConstrainedBeanListener.class).addVetoableChangeListener(this);
+-------------------------------+

** Changes notification

    Any code that wishes to receive notification of changes of configuration bean can implement
the ConfigListener interface. 

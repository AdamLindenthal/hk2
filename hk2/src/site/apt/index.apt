
    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2010-2011 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

														------
														Hundred Kilobytes Kernel
														------
														Jerome Dochez
														------
														---




Introduction

    HK2 for Hundred Kilobytes Kernel is an abstraction to a module subsystem coupled with a simple yet powerful component model to build server side software. It is the foundation for the GlassFish V3 application server and consist of several technologies :

* Modules subsystem abstraction

    Modern large Java software usually rely on a module subsystem to offer a better level of isolation between parts of the
 application. Many technologies have been around for years, HK2 proposes a model which is aimed to be friendly to
 existing technologies such as OSGi by providing a direct mapping from its abstraction to most OSGi features while preserving the user code from dealing with modules directly in their code. The independence from OSGi APIs in hk2 enabled projects greatly simplifies the programmer's life by concentrating on services and dependencies rather than on modules (building blocks). 

   Link to {{{.\/modules.html}Modules Subsystem}}

* Component Model

    On top of the module subsystem abstraction, HK2 define components which can also be seen as Services. These components can be
automatically and dynamically discovered by the runtime and can use innovative tachnologies such as Inversion of Control
or injection of dependencies as well as automatic resolution of dependencies.

   Link to {{{.\/components.html}Component Model}}

* Class Model

	In order to generate enough metadata to satisfy all injection points with a suitable injection target, HK2 has developped a simple class model which mimics a java class reflective API without the cost of loading the class files with a class loader. The class-model sub project can be used indenpendently of HK2, it is using ASM to load the byte code and provide a user friendly reflective APIs on the parsed classes.

   Link to {{{.\/class-model/index.html}Class-Model}}

* Configuration
 
	Most sofware need to store some configuration for persisting behaviours accross restarts. Such configuration is usually stored in xml files and can be consumed like any other services in hk2. We provide a powerful abstraction to a configuration file definition, coupled with a 2 phase transactional system to mutate any configuration that ensure isolation and completness of any configuation changes.

    Link to {{{.\/config\/configuration.html}Configuration}}

* Testing

	An integration with JUnit is provided so users can develop their tests with dependency injection available. For more sophisticated tests, a harness is also provided to start modules and habitat during test execution

    Link to {{{.\/auto-depends/tests.html}Testing}}

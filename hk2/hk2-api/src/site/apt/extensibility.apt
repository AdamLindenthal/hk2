            ------
            Extensibility with HK2
            ------


Compatibility

    This page describes modularity with the HK2 2.0 API, which is based on the
    JSR-330 standard annotations.  Also, Habitat has been replaced with a new
    interface called {{{./apidocs/org/glassfish/hk2/api/ServiceLocator.html}ServiceLocator}}.
    More information can be found {{{./index.html}here}}.
    
Extensibility of HK2

 HK2 is extensible along many directions.  This page is intended to give an overview and example of each dimension along which
 users can customize thier HK2 environment.  Among the set of things which can be extended are these:
 
 * {{Adding a Scope and Context to the system}}
 
 * {{Dealing with ClassLoading issues}}
 
 * {{Custom Injection Resolvers}}
 
 * {{Foreign Active Descriptor implementations}}
 
 * {{Validation}}
 
* {Adding a Scope and Context to the system}

 This {{{./examples/ctm/index.html}example}} adds a context that is based on the current running tenant.
 
 This {{{./examples/custom-resolver/index.html}example}} adds a request scoped context.
 
* {Dealing with ClassLoading issues}

 Classloading is an interesting challenge in any Java environment.  HK2 defers classloading as long as possible, but at some
 point, it must get access to the true class in order to create and inject instances.  At that moment, HK2 will attempt
 to reify the descriptor, using the {{{./apidocs/org/glassfish/hk2/api/ServiceLocator.html}ServiceLocator}} reify method.
 
 Every {{{./apidocs/org/glassfish/hk2/api/Descriptor.html}Descriptor}} bound into the system has an associated
 {{{./apidocs/org/glassfish/hk2/api/HK2Loader.html}HK2Loader}}.  If the getLoader method of
 {{{./apidocs/org/glassfish/hk2/api/Descriptor.html}Descriptor}} returns null, then the system defined algorithm
 for loading classes will be used.  Otherwise, the given {{{./apidocs/org/glassfish/hk2/api/HK2Loader.html}HK2Loader}}
 will be used to load the class described by this {{{./apidocs/org/glassfish/hk2/api/Descriptor.html}Descriptor}}.
 
 The system algorithm used when the getLoader method of {{{./apidocs/org/glassfish/hk2/api/Descriptor.html}Descriptor}}
 returns null is to first consult the classloader of the class being injected into, if available.  If not available,
 HK2 will use the classloader that loaded HK2 itself.  Failing this, the class will fail to be loaded and an exception
 will be thrown.
 
 Note that since the user is providing an implementation of {{{./apidocs/org/glassfish/hk2/api/HK2Loader.html}HK2Loader}}
 rather than a java.lang.ClassLoader that it is possible to delay the instantiation of the underlying ClassLoader until
 the {{{./apidocs/org/glassfish/hk2/api/Descriptor.html}Descriptor}} is being reified.  It might also be possible to have the
 implementation of {{{./apidocs/org/glassfish/hk2/api/HK2Loader.html}HK2Loader}} consult several underlying ClassLoaders,
 or construct the class dynamically using weaving or some other class building technology.  The mind boggles at all the
 ways {{{./apidocs/org/glassfish/hk2/api/HK2Loader.html}HK2Loader}} can be implemented.
 
* {Custom Injection Resolvers}

 This {{{./examples/custom-resolver/index.html}example}} adds a custom injection resolver that customizes the default
 JSR-330 injection resolver.
 
* {Foreign Active Descriptor implementations}

 Here an example of Foreign Active Descriptors
 
* {Validation}

 Here an example of a validating injection point
 